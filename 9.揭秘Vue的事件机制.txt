导读：Vue 提供了用户使用功能，开发者可以更偏向于逻辑而非基本功能的实现。例如，在日常开发中，我们将 @click=*** 用的飞起，但是我们是否思考，Vue 如何在后面为我们的模板做事件相关的处理，并且我们经常利用组件的自定义事件去实现父子间的通信，那这个事件和原生 dom 事件又有不同的地方吗，能够实现通信的原理又是什么？

* 模板编译
  Vue 在挂载实例前，有相当多的工作是进行模板的编译，将 template 模板进行编译，解析成 AST 树，再转换成 render 函数，而有了 render 函数后才会进入实例挂载过程。对于事件而言，我们经常使用 v-on 或者 @ 在模板上绑定事件。因此对事件的第一步处理，在是在编译阶段对事件指令做收集处理。

  从一个简单的用法分析编译阶段收集的信息：

    <div id="app">
      <div v-on:click.stop="doThis">点击</div>
      <span>{{ count }}</span>
    </div>
    <script>
      var vm = new Vue({
        el: '#app',
        data() {
          return {
            count: 1
          }
        },
        methods: {
          doThis() {
            ++this.count
          }
        }
      })
    </script>

  我们之前在模板编译的时候大致说过编译的流程，模板编译的入口是在 var ast = parse(template.trim(), options); 中，parse 通过拆分模板字符串，将其解析为一个 AST 树，其中对于属性的处理，在 processAttr 中，由于分支较多，我们只分析例子中的流程。

    var dirRE = /^v-|^@|^:/;
    function processAttr (el) {
      var list = el.attrsList;
      var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
      for (i = 0; l = list.length; i < l; i++) {
        name = rawName = list[i].name; // v-on:click
        value = list[i].value; // doThis
        if (dirRE.test(name)) { // 匹配 v- 或者 @ 开头的指令
          el.hasBindings = true;
          modifiers = parseModifiers(name.replace(dirRE, '')); // parseModifiers('on:click')
          if (modifiers) {
            name = name.replace(modifiersRE, '');
          }
          if (bindRE.test(name)) { // v-bind 分支
            // ...留到 v-bind 指令时分析
          } else if (onRE.test(name)) { // v-on 分支
            name = name.replace(onRE, ''); // 拿到真正的时间 click
            isDynamic = dynamicArgRe.test(name); // 动态时间绑定
            if (isDynamic) {
              name = name.slice(1, -1); // '123456789'.slice(1, -1); '2345678'
            }
            addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
          } else { // normal directives
            // 其他指令相关逻辑
          }
        } else { ... }
      }
    }

  processAttr 的逻辑虽然较多，但是理解起来较为简单，var dirRE = /^v-|^@|^:/; 是匹配事件相关的正则，命中匹配的会得到事件指令相关内容，包括事件本身，事件回调以及事件修改符。最终通过 addHandler 方法，为 AST 树添加时间相关属性。而 addHandler 还有一个重要功能是对事件修饰符进行特殊处理(1.passive 和 prevent 不能同时使用。2.修饰器right、middle、once、capture、passive)。

    // el 是当前解析的 AST 树
    function addHandler (el,name,value,modifiers,important,warn,range,dynamic) {
      modifiers = modifiers || emptyObject;
      // passive 和 prevent 不能同时使用，可以参照官方文档说明
      if (warn && modifiers.prevent && modifiers.passive) {
        warn(
          'passive and prevent cant\'t be used together.' + 
          'passive handler can\'t prevent default event.',
          range
        ); // 被动和预防不能同时使用。 被动处理程序不能阻止默认事件。
      }
      // 这部分的逻辑会对特殊的修饰符做字符串拼接的处理，以备后续的使用
      if(modifiers.right) {
        if (dynamic) {
          name = "(" + name + ") === click' ? 'contextmenu' : (" + name + ")";
        } else if (name === 'click') {
          name = 'contextmenu';
          delete modifiers.right;
        }
      } else if (modifiers.middle) {
        if (dynamic) {
          name = "(" + name + ")==='click' ? 'mouseup' : (" + name + ")";
        } else if (name === 'click') {
          name = 'mouseup';
        }
      }
      if (modifiers.capture) {
        delete modifiers.capture;
        name = prependModifierMarker('!', name, dynamic);
      }
      if (modifiers.once) {
        delete modifiers.once;
        name = prependModifierMarker('~', name, dynamic);
      }
      /* istanbul ignore if */
      if (modifiers.passive) {
        delete modifiers.passive;
        name = prependModifierMarker('&', name, dynamic);
      }
      // events 用来记录绑定的事件
      var events;
      if (modifiers.native) {
        delete modifiers.native;
        events = el.nativeEvents || (el.nativeEvents = {});
      } else {
        events = el.events || (el.events = {});
      }

      var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
      if (modifiers !== emptyObject) {
        newHandler.modifiers = modifiers;
      }

      var handlers = events[name];
      /* istanbul ignore if */
      // 绑定的事件可以多个，回调也可以多个，最终会合并到数组中
      if (Array.isArray(handlers)) {
        important ? handlers.unshift(newHandler) : handlers.push(newHandler);
      } else if (handlers) {
        events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
      } else {
        events[name] = newHandler;
      }
      el.plain = false;
    }
  
  修饰符的处理会改变最终字符串的拼接结果，我们看最终转换的AST树：

* 代码生成
  模板编译的最后一步是根据解析完的 AST 树生成对应平台的渲染函数，也就是 render 函数的生成过程，对应 var code = generate(ast, options); 

    function generate (ast, options) {
      var state = new CodeGenState(options);
      var code = ast ? genElement(ast, state) : '_c("div")';
      return {
        render: ("with(this){ return " + code + "}"), // with 函数
        staticRenderFns: state.staticRenderFns // 静态渲染函数
      }
    }
  
  其中核心处理在 genElement 中，genElement 函数会根据不同指令类型处理不同的分支，对于普通模板中的编译会进入 genData 函数中处理，同样分析只针对事件相关的处理，从前面分析出的 AST 树明显看出，AST 树中多了 events 的属性，genHandlers 函数会为 event 属性做逻辑处理。

    function genData (el, state) {
      var data = "{";

      // directives first.
      // directives may mutate the el`s other properties before they are generated. 指令可以在生成el的其他属性之前改变它们。  
      var dirs = genDirectives(el, state);
      if (dirs) { data += dirs + ','; }
      // 其他处理
      ...

      // event handlers
      if (el.events) {
        data += (genHandlers(el.events, false)) + ',';
      }
      ...
      return data
    }
  
  genHandlers 的逻辑，会遍历解析好的 AST 树，拿到 event 对象属性，并根据属性上的事件对象拼接成字符串。

    function genHandlers (events, isNative) {
      var prefix = isNative ? 'nativeOn:' : 'on:'; // 前缀
      var staticHandlers = "";
      var dynamicHandlers = "";
      // 遍历 ast 树解析好的 event 对象
      for (var name in events) {
        // genHandler 本质上是将事件对象转换成可拼接的字符串
        var handlerCode = genHandler(events[name]);
        if (events[name] && events[name].dynamic) {
          dynamicHandlers += name + ',' + handlerCode + ',';
        } else {
          staticHandlers += "\"" + name + "\":" + handlerCode + ',';
        }
      }
      staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
      if (dynamicHandlers) {
        return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
      } else {
        return prefix + staticHandlers
      }
    }

    // 事件模板书写匹配
    var isMethodPath = simplePathRE.test(handler.value); // doThis  事件名
    var isFunctionExpression = fnExpRE.test(handler.value); // () => {} or function() {} 函数表达式
    var isFunctionInvocation = simplePathRE(handler.value.replace(fnInvokeRE, '')); // doThis($event) 函数调用

    function genHandler (handler) {
      if(!handler){
        return 'function(){}'
      }
      // 事件绑定可以多个，多个在解析ast树时会以数组的形式存在，如果有多个则会递归调用genHandler方法返回数组。
      if (Array.isArray(handler)) {
        return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
      }
      // value： doThis 可以有三种方式
      var isMethodPath = simplePathRE.test(handler.value); // doThis
      var isFunctionExpression = fnExpRE.test(handler.value); // () => {} or function() {}
      var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, '')); // doThis($event)

      // 没有任何修饰符
      if (!handler.modifiers) {
        // 符合函数定义规范，则直接返回调用函数名 doThis
        if (isMethodPath || isFunctionExpression) {
          return handler.value
        }
        // 不符合则通过function函数封装返回
        return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
      } else {
        // 包含修饰符的场景
      }
    }

  模板中事件的写法有三种，分别对应上诉三个正则匹配内容。
    1. <div @click="doThis"></div>
    2. <div @click="doThis($event)"></div>
    3. <div @click="()=>{}"></div>  <div @click="function(){}"></div>
  
  上述对事件的转换，如果事件不带任何修饰符，并且满足正确的模板写法，则直接返回调用事件名，如果不满足，则有可能是 <div @click="console.log(11)"></div> 的写法，此时会封装到 function($event){} 中。
  包含修饰符的场景较多，我们单独列出分析。以上文中的例子说明，modifiers: { stop: true }会拿到stop对应需要添加的逻辑脚本'$event.stopPropagation();',并将它添加到函数字符串中返回。

    function genHandler() {
      // ···
      } else {
        var code = '';
        var genModifierCode = '';
        var keys = [];
        // 遍历modifiers上记录的修饰符
        for (var key in handler.modifiers) {
          if (modifierCode[key]) {
            // 根据修饰符添加对应js的代码
            genModifierCode += modifierCode[key];
            // left/right
            if (keyCodes[key]) {
              keys.push(key);
            }
            // 针对exact的处理
          } else if (key === 'exact') {
            var modifiers = (handler.modifiers);
            genModifierCode += genGuard(
              ['ctrl', 'shift', 'alt', 'meta']
                .filter(function (keyModifier) { return !modifiers[keyModifier]; })
                .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
                .join('||')
            );
          } else {
            keys.push(key);
          }
        }
        if (keys.length) {
          code += genKeyFilter(keys);
        }
        // Make sure modifiers like prevent and stop get executed after key filtering
        if (genModifierCode) {
          code += genModifierCode;
        }
        // 根据三种不同的书写模板返回不同的字符串
        var handlerCode = isMethodPath
          ? ("return " + (handler.value) + "($event)")
          : isFunctionExpression
            ? ("return (" + (handler.value) + ")($event)")
            : isFunctionInvocation
              ? ("return " + (handler.value))
              : handler.value;
        return ("function($event){" + code + handlerCode + "}")
      }
    }
    var modifierCode = {
      stop: '$event.stopPropagation();',
      prevent: '$event.preventDefault();',
      self: genGuard("$event.target !== $event.currentTarget"),
      ctrl: genGuard("!$event.ctrlKey"),
      shift: genGuard("!$event.shiftKey"),
      alt: genGuard("!$event.altKey"),
      meta: genGuard("!$event.metaKey"),
      left: genGuard("'button' in $event && $event.button !== 0"),
      middle: genGuard("'button' in $event && $event.button !== 1"),
      right: genGuard("'button' in $event && $event.button !== 2")
    };
  
  经过这一转换后，生成with封装的render函数如下：

    "_c('div',{attrs:{"id":"app"}},[_c('div',{on:{"click":function($event){$event.stopPropagation();return doThis($event)}}},[_v("点击")]),_v(" "),_c('span',[_v(_s(count))])])"

* 事件绑定
  前面花了大量的篇幅介绍了模板上的事件标记在构建AST树上是怎么处理，并且如何根据构建的AST树返回正确的render渲染函数，但是真正事件绑定还是离不开绑定注册事件。这一个阶段就是发生在组件挂载的阶段。 有了render函数，自然可以生成实例挂载需要的Vnode树，并且会进行patchVnode的环节进行真实节点的构建，如果发现过程已经遗忘，可以回顾以往章节。

  有了Vnode,接下来会遍历子节点递归调用createElm为每个子节点创建真实的DOM,由于Vnode中有data属性，在创建真实DOM时会进行注册相关钩子的过程，其中一个就是注册事件相关处理。
  
...

* 9.5 小结
  事件是我们日常开发中必不可少的功能点，Vue在应用层暴露了@,v-on的指令供开发者在模板中绑定事件。事件指令在模板编译阶段会以属性的形式存在，而在真实节点渲染阶段会根据事件属性去绑定相关的事件。对于组件的事件而言，我们可以利用事件进行子父组件间的通信，他本质上是在同个子组件内部维护了一个事件总线，从分析结果可以看出，之所以有子父组件通信的效果，原因仅仅是因为回调函数写在了父组件中。