2021.10.19的总结
	数据拦截的思想处理为构建响应式系统准备，它也可以为数据进行筛选过滤，看初始化的代码，在合并选项后，vue接下来会为vm实例设置一层代理，这层代理可以为vue在模板渲染时进行一层数据筛选。

	key in obj 或者 with 作用域时，会触发has的钩子。
	render 函数包装成 with 的执行语句，在执行 with 语句过程中，该作用域下变量的访问都会触发 has 钩子，这也是模板渲染时之所以会触发代理拦截的原因。
	has钩子里面过滤 ' 模板使用未定义的变量 ' 和 ' 使用 $ _ 开头的变量 '。

	vue 中的响应式系统是以 Object.defineProperty 实现的，但是这并不代表没有 Proxy 的应用。initProxy 就是其中的例子，这层代理会在模板渲染时对一些非法或者没有定义的变量进行筛选判断，和没有数据代理相比，非法的数据定义错误会提前到应用层捕获，有利于开发者对错误的排查。




* 数据代理的含义
	数据代理的另一个说法是数据劫持，当我们在访问或者修改对象的某个属性时，数据劫持可以拦截这个行为并进行额外的操作或者修改返回的结果。而我们知道Vue响应式系统的核心就是数据代理，代理使得数据在访问时进行依赖收集，在修改更新时对依赖进行更新，这是响应式系统的核心思路。而这一切离不开Vue对数据做了拦截代理。然而响应式并不是本节讨论的重点，这一节我们将看看数据代理在其他场景下的应用。在分析之前，我们需要掌握两种实现数据代理的方法： Object.defineProperty 和 Proxy。
	1.Object.defineProperty
		官方定义：Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回这个对象。
		基本用法：Object.defineProperty(obj, prop, descriptor)
				 descriptor 的属性描述符有两种形式：
				 	一种是数据描述符；
				 		1. configurable:数据是否可删除，可配置
				 		2. enumerable:属性是否可枚举
				 		3. value:属性值，默认为undefined
				 		4. writable:属性是否可读写
				 	一种是存取描述符。
				 		1. configurable:数据是否可删除，可配置
				 		2. enumerable:属性是否可枚举
				 		3. get:一个给属性提供 getter 的方法
				 		4. set:一个给属性提供 setter 的方法
				 重点注意的是：数据描述符的 value,writable 和 存取描述符中的 get,set 属性不能同时存在，否则会抛出异常。
	2.Proxy
		为了解决像数组这类无法进行数据拦截，以及深层次的嵌套问题，es6 引入了 Proxy 的概念，它是真正语言层面对数据拦截的定义。
		Proxy 针对目标对象会创建一个新的实例对象，并将目标对象代理到新的实例对象上。我们只要通过操作新的实例对象就能间接的操作真正的目标对象了。
		基本用法：
			var obj = {};
			var newObj = new Proxy(obj,{ get(target, key, receiver){ ... },set(target, key, value, receiver){ ... } })

* initProxy
	在合并选项后，Vue 接下来会为 vm 实例设置一层代码，这层代理可以为 " Vue 在模板渲染时进行一层数据筛选 "。
	Vue.prototype._init = function(options){
		// 选项合并
		...
		{
			// 对 vm 实例进行一层代理
			initProxy(vm);
		}
		...
	}
	// 代理函数
	var initProxy = function initProxy(vm){
		// 首先是判断浏览器是否支持原生的 proxy
		var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);
		if(hasProxy){
			var options = vm.$options;
			var handlers = options.render && options.render._withStripped 
				? getHandler
				: hasHandler;
			// 代理 vm 实例到 vm 属性 _renderProxy
			vm._renderProxy = new Proxy(vm, handlers);
		}else{
			vm._renderProxy = vm;
		}
	}
	读到这里有几点疑惑：
		1.这层代理的访问时机是什么，也就是说什么场景会触发这层代理。
		2.参数 options.render._withStripped 代表着什么？getHandler 和 hasHandler 又有什么不同？
		3.如何理解为模板数据的访问进行数据筛选过滤、到底有什么数据需要过滤？
		4.只有在支持原生 proxy 环境下才会建立这层代理，那么在旧的浏览器，非法的数据又将如何展示？

	- 触发代理
		源码中 vm._renderProxy 的使用出现在 Vue 实例的 _render 方法中，Vue.prototype._render 是将渲染函数转换成一个 Virtual DOM 的方法，Vue 内部在 js 和真是 DOM 节点中设立了一层中间层，这和中间层就是 Virtual DOM,遵循 js -> virtual -> 真实DOM的转换过程，而 Vue.prototype._render 是前半段的转换，当我们调用 render 函数时，代理的 vm._renderProxy 对象便会访问到。
		Vue.prototype._render = function(){
			...
			// 调用vm._renderProxy
			vnode = render.call(vm._renderProxy, vm.$createElement);
		}
		当使用类似 webpack 这样的打包工具时，通常会使用 vue-loader 插件进行模板的编译，这个时候 options.render 是存在的，并且 _withStripped 的属性也会设置为true。
		我们分析使用 vue-loader 场景下 hasHandler 的逻辑。
		var hasHandler = {
			// key in obj 或者 with 作用域时，会触发has的钩子
			has:function has(target, key){
				...
			}
		}
		hasHandler 函数定义了 has 钩子，前面介绍过，proxy 的钩子有13个之多，而 has 是其中一个，它用来拦截 propKey in proxy 的操作，返回一个布尔值。而除了拦截 in 操作符外，has 钩子同样可以拦截 with 语句下的作用对象。例如
		var obj = {
			a: 1
		}
		var nobj = new Proxy(obj, {
			has(target, key){
				console.log(target); // { a:1 }
				console.log(key); // a
				return true;
			}
		})
		with(nobj) {
			a = 2
		}
		这个 render 函数就是包装成 with 的执行语句，在执行 with 语句的过程中，该作用域下变量的访问都会触发 has 钩子，这也是模板渲染时之所以会触发代理拦截的原因。
		var vm = new Vue({
			el: '#app'
		})
		console.log(vm.$options.render);
		// 输出
		f anonymous(){
			with(this){ return _c('div',{attrs:{"id":"app"}},[_v(_s(message)+_s(_test))]) }
		}
	- 数据过滤
		知道了访问时机，那么设置这层代理的作用又在哪里呢？命名的规范是数据过滤检测的前提。
		var hasHandler = {
		    has: function has (target, key) {
		        var has = key in target;
		        // isAllowed用来判断模板上出现的变量是否合法。
		        var isAllowed = allowedGlobals(key) ||
		            (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
		            // _和$开头的变量不允许出现在定义的数据中，因为他是vue内部保留属性的开头。
		        // 1. warnReservedPrefix: 警告不能以$ _开头的变量
		        // 2. warnNonPresent: 警告模板出现的变量在vue实例中未定义
		        if (!has && !isAllowed) {
		            if (key in target.$data) { warnReservedPrefix(target, key); }
		            else { warnNonPresent(target, key); }
		        }
		        return has || !isAllowed
		    }
		};

		// 模板中允许出现的非vue实例定义的变量
		var allowedGlobals = makeMap(
		    'Infinity,undefined,NaN,isFinite,isNaN,' +
		    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
		    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
		    'require' // for Webpack/Browserify
		);

		首先 allowedGlobals 定义了 JavaScript 保留的关键字，这些关键字是不允许作为用户变量存在的。（typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data)）的逻辑对以 $,_ 开头，或者是否是 data 中未定义的变量做判断过滤。这里对未定义变量的场景多解释几句，前面说到，代理的对象 vm.renderProxy 是在执行 _render 函数中访问的，而在使用 template 模板的情况下，render 函数是对模板的解析结果，换而言之，之所以会触发数据代理拦截是因为模板中使用了变量，例如<di>{{message}}</div>。而如果我们在模板中使用了未定义的变量，这个过程就被 proxy 拦截，并定义为不合法的变量使用。

		我们可以看看两个报错信息的源代码(是不是很熟悉):
		// 模板使用未定义的变量
		var warnNonPresent = function (target, key) {
		    warn(
		    "Property or method \"" + key + "\" is not defined on the instance but " +
		    'referenced during render. Make sure that this property is reactive, ' +
		    'either in the data option, or for class-based components, by ' +
		    'initializing the property. ' +
		    'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
		    target
		    );
		};

		// 使用$,_开头的变量
		var warnReservedPrefix = function (target, key) {
		    warn(
		    "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
		    'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
		    'prevent conflicts with Vue internals' +
		    'See: https://vuejs.org/v2/api/#data',
		    target
		    );
		};
	- 支持和不支持proxy的情况
		// 模板中使用_开头的变量，且在data选项中有定义
		<div id="app">{{_test}}</div>
		new Vue({
		    el: '#app',
		    data: {
		        _test: 'proxy'
		    }
		})
		1.支持 proxy 浏览器的结果
			[Vue warn]: Property "_test" must be accessed with "$data._test" ...
		2.不支持 proxy 浏览器的结果
			ReferenceError:_test is not defined

		显然，在没有经过代理的情况下，使用_开头的变量依旧会 报错，但是它变成了js语言层面的错误，表示该变量没有被声明。但是这个报错无法在Vue这一层知道错误的详细信息，而这就是能使用Proxy的好处。接着我们会思考，既然已经在data选项中定义了_test变量，为什么访问时还是找不到变量的定义呢？ 原来在初始化数据阶段，Vue已经为数据进行了一层筛选的代理。具体看initData对数据的代理，其他实现细节不在本节讨论范围内。

		function initData(vm) {
		    vm._data = typeof data === 'function' ? getData(data, vm) : data || {}
		    if (!isReserved(key)) {
		        // 数据代理，用户可直接通过vm实例返回data数据
		        proxy(vm, "_data", key);
		    }
		}

		function isReserved (str) {
		    var c = (str + '').charCodeAt(0);
		    // 首字符是$, _的字符串
		    return c === 0x24 || c === 0x5F
		}
		vm._data可以拿到最终data选项合并的结果，isReserved会过滤以$,_开头的变量，proxy会为实例数据的访问做代理，当我们访问this.message时，实际上访问的是this._data.message,而有了isReserved的筛选，即使this._data._test存在，我们依旧无法在访问this._test时拿到_test变量。这就解释了为什么会有变量没有被声明的语法错误，而proxy的实现，又是基于上述提到的Object.defineProperty来实现的。

		function proxy (target, sourceKey, key) {
		    sharedPropertyDefinition.get = function proxyGetter () {
		        // 当访问this[key]时，会代理访问this._data[key]的值
		        return this[sourceKey][key]
		    };
		    sharedPropertyDefinition.set = function proxySetter (val) {
		        this[sourceKey][key] = val;
		    };
		    Object.defineProperty(target, key, sharedPropertyDefinition);
		}

小结：
	这一节内容，详细的介绍了数据代理在 Vue 的实现思路和另外一个应用场景，数据代理是一种设计模式，也是一种编程思想，Object.defineProperty 和 Proxy 都可以实现数据代理，但是他们各有优势，前者兼容性好，但是却无法对数组或者嵌套的对象进行代理检测，而 Proxy 基本可以解决所有的问题，但是对兼容性要求很高。Vue 中的响应式系统是以 Object.defineProperty 实现的，但是这并不代表没有 Proxy 的应用。initProxy 就是其中的例子，这层代理会在模板渲染时对一些非法或者没有定义的变量进行筛选判断，和没有数据代理相比，非法的数据定义错误会提前到应用层捕获，这也有利于开发者对错误的排查。




